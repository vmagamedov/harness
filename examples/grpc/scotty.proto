syntax = "proto3";

package scotty;

import "validate/validate.proto";
import "harness/wire.proto";
import "harness/postgres.proto";
import "harness/grpc.proto";
import "harness/logging.proto";
import "harness/tracing.proto";
import "harness/metrics.proto";

import "google/protobuf/empty.proto";

message Configuration {
    option (harness.service).name = "scotty";

    bool debug = 1;

    harness.postgres.Pool db = 2 [
        (validate.rules).message.required = true,
        (harness.wire).input.type = "harness.wires.asyncpg.PoolWire",
        (harness.wire).input.reach = LOCALHOST
    ];
    harness.logging.Console console = 4 [
        (harness.wire).input.type = "harness.wires.logging.ConsoleWire"
    ];
    harness.logging.Syslog syslog = 5 [
        (harness.wire).input.type = "harness.wires.logging.SyslogWire"
    ];
    harness.tracing.Jaeger tracing = 6 [
        (harness.wire).input.type = "harness.wires.opentelemetry.ext.jaeger.JaegerSpanExporterWire"
    ];
    harness.grpc.Server server = 7 [
        (validate.rules).message.required = true,
        (harness.wire).output.type = "harness.wires.grpclib.server.ServerWire",
        (harness.wire).output.expose = PUBLIC
    ];
    harness.metrics.Prometheus prometheus = 8 [
        (harness.wire).output.type = "harness.wires.opentelemetry.ext.prometheus.PrometheusMetricsExporterWire"
    ];
}

service Scotty {
    rpc BeamMeUp (google.protobuf.Empty) returns (google.protobuf.Empty) {}
}
