syntax = "proto3";

package example;

import "harness/wire.proto";
import "harness/postgres.proto";
import "harness/net.proto";
import "harness/http.proto";
import "harness/logging.proto";
import "harness/tracing.proto";

message Configuration {
    option (harness.service).name = "whisper";
    option (harness.service).release = MULTI;
    option (harness.service).repository = "registry.acme.dev/team/whisper";
    option (harness.service).resources.requests = {cpu: "300m" memory: "128Mi"};
    option (harness.service).resources.limits = {cpu: "1" memory: "192Mi"};

    bool debug = 1;

    harness.postgres.Connection db = 2 [
        (harness.wire).input = "python/asyncpg:ConnectionWire",
        (harness.wire).access = EXTERNAL
    ];
    harness.logging.Console console = 3 [
        (harness.wire).input = "python/logging:ConsoleWire"
    ];
    harness.tracing.Exporter tracing = 4 [
        (harness.wire).input = "python/opentelemetry.ext.jaeger:JaegerSpanExporterWire"
    ];
    harness.http.Server server = 5 [
        (harness.wire).output = "python/aiohttp:ServerWire",
        (harness.wire).visibility = PUBLIC,
        (harness.wire).protocol = HTTP
    ];
    harness.net.Server monitor = 6 [
        (harness.wire).output = "python/aiomonitor:MonitorWire",
        (harness.wire).protocol = HTTP
    ];
}
