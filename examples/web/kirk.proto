syntax = "proto3";

package kirk;

import "validate/validate.proto";
import "harness/wire.proto";
import "harness/postgres.proto";
import "harness/net.proto";
import "harness/http.proto";
import "harness/grpc.proto";
import "harness/logging.proto";
import "harness/tracing.proto";

message Configuration {
    option (harness.service).name = "kirk";
    option (harness.service).container.repository = "registry.acme.dev/team/kirk";

    bool debug = 1;

    harness.postgres.Pool db = 2 [
        (validate.rules).message.required = true,
        (harness.wire).input.type = "harness.wires.asyncpg.PoolWire",
        (harness.wire).input.reach = EXTERNAL
    ];
    harness.grpc.Channel scotty = 3 [
        (validate.rules).message.required = true,
        (harness.wire).input.type = "harness.wires.grpclib.client.ChannelWire",
        (harness.wire).input.reach = NAMESPACE
    ];
    harness.logging.Console console = 4 [
        (validate.rules).message.required = true,
        (harness.wire).input.type = "harness.wires.logging.ConsoleWire"
    ];
    harness.tracing.Jaeger tracing = 5 [
        (validate.rules).message.required = true,
        (harness.wire).input.type = "harness.wires.opentelemetry.ext.jaeger.JaegerSpanExporterWire"
    ];
    harness.http.Server server = 6 [
        (validate.rules).message.required = true,
        (harness.wire).output.type = "harness.wires.aiohttp.web.ServerWire",
        (harness.wire).output.expose = PUBLIC
    ];
    harness.net.Server monitor = 7 [
        (validate.rules).message.required = true,
        (harness.wire).output.type = "harness.wires.aiomonitor.MonitorWire"
    ];
}
